import numpy as np
import pandas as pd
from sklearn.metrics import precision_recall_curve, average_precision_score
import plotly.graph_objects as go
from typing import Tuple

def plot_pr_curve_plotly_simple(
    y_true,
    y_score,
    title: str = "Precision–Recall curve"
) -> Tuple[pd.DataFrame, go.Figure]:
    """
    y_true : 1D массив меток (0/1)
    y_score: 1D массив скорингов/вероятностей ПОЛОЖИТЕЛЬНОГО класса
    """
    y_true  = np.asarray(y_true)
    y_score = np.asarray(y_score)
    if y_score.ndim != 1:
        raise ValueError("Ожидается 1D массив y_score (например, y_proba[:, 1]).")

    precision, recall, thresholds = precision_recall_curve(y_true, y_score, pos_label=1)
    ap = average_precision_score(y_true, y_score)
    prevalence = y_true.mean()  # базовый уровень precision у случайного классификатора

    # precision_recall_curve возвращает thresholds на 1 короче
    thr_padded = np.r_[np.nan, thresholds]

    df_points = pd.DataFrame({
        "recall": recall,
        "precision": precision,
        "threshold": thr_padded
    })
    df_points["average_precision"] = ap
    df_points["prevalence"] = prevalence

    # График
    fig = go.Figure()

    # Базовая линия (доля позитивов)
    fig.add_trace(go.Scatter(
        x=[0, 1], y=[prevalence, prevalence],
        mode="lines",
        name=f"Baseline (prevalence={prevalence:.3f})",
        line=dict(dash="dash", color="#888"),
        hoverinfo="skip"
    ))

    # PR-кривая
    fig.add_trace(go.Scatter(
        x=recall, y=precision,
        mode="lines",
        name=f"PR (AP={ap:.3f})",
        customdata=thr_padded,
        hovertemplate="Recall: %{x:.3f}<br>Precision: %{y:.3f}<br>Threshold: %{customdata:.3f}",
        line=dict(width=3)
    ))

    fig.update_layout(
        title=title,
        xaxis=dict(title="Recall", range=[0, 1], tickformat=".2f"),
        yaxis=dict(title="Precision", range=[0, 1], tickformat=".2f"),
        template="plotly_white",
        legend=dict(orientation="h", y=1.02, x=1, xanchor="right", yanchor="bottom"),
        margin=dict(t=70, r=40, b=50, l=60),
        hovermode="x unified"
    )

    return df_points, fig
