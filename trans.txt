import polars as pl

merged_df = pl.scan_parquet(PATH_TO_SAMPLE).collect()  # Вычисляем сразу
primary_key_dtype = merged_df[PRIMARY_KEY].dtype

feats = [pl.scan_parquet(f) for f in feature_paths]

for feat_df in tqdm.tqdm(feats):
    # Приводим тип и вычисляем feat_df
    feat_df_casted = feat_df.with_columns([
        pl.col(PRIMARY_KEY).cast(primary_key_dtype)
    ]).collect()
    
    # Выполняем join
    merged_df = merged_df.join(feat_df_casted, on=PRIMARY_KEY, how='left')
    
    # Проверяем дубликаты
    if merged_df[PRIMARY_KEY].is_duplicated().any():
        duplicates = merged_df.filter(pl.col(PRIMARY_KEY).is_duplicated())
        
        # Находим конфликтующие колонки
        diff_cols = (
            duplicates
            .group_by(PRIMARY_KEY)
            .agg(pl.all().n_unique().gt(1))
            .select(pl.exclude(PRIMARY_KEY))
            .any()
        )
        
        res = [col for col, has_diff in diff_cols.row(0) if has_diff]
        
        if res:
            print(f"Удаляем конфликтующие колонки: {res}")
            merged_df = merged_df.drop(res)
        
        # Удаляем дубликаты
        merged_df = merged_df.unique(subset=[PRIMARY_KEY], keep='first')

# В конце можно преобразовать обратно в LazyFrame если нужно
merged_df = merged_df.lazy()
