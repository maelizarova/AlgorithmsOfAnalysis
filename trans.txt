"""
–ü—Ä–∏–º–µ—Ä –æ—Ç—á—ë—Ç–∞ –æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
"""

import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from sklearn.metrics import roc_curve, auc, precision_recall_curve
from report_generator import Report
import random
from datetime import datetime, timedelta

def generate_sample_data():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    np.random.seed(42)
    random.seed(42)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º
    months = ['2023-01', '2023-02', '2023-03', '2023-04', '2023-05', '2023-06',
              '2023-07', '2023-08', '2023-09', '2023-10', '2023-11', '2023-12']
    
    # –î–∞–Ω–Ω—ã–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–ø–∏—Å–µ–π –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ –º–µ—Å—è—Ü–∞–º
    monthly_data = []
    for month in months:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
        base_count = 10000 + np.random.normal(0, 1000)
        if month in ['2023-11', '2023-12', '2023-01']:  # –ó–∏–º–Ω–∏–µ –º–µ—Å—è—Ü—ã
            count = int(base_count * 1.3)
            target_rate = 0.15 + np.random.normal(0, 0.02)
        elif month in ['2023-06', '2023-07', '2023-08']:  # –õ–µ—Ç–Ω–∏–µ –º–µ—Å—è—Ü—ã
            count = int(base_count * 0.8)
            target_rate = 0.08 + np.random.normal(0, 0.015)
        else:
            count = int(base_count)
            target_rate = 0.12 + np.random.normal(0, 0.02)
        
        target_rate = max(0.05, min(0.25, target_rate))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        
        monthly_data.append({
            'month': month,
            'total_records': count,
            'positive_target': int(count * target_rate),
            'target_rate': target_rate
        })
    
    monthly_df = pd.DataFrame(monthly_data)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ROC –∏ PR –∫—Ä–∏–≤—ã—Ö
    n_samples = 1000
    
    # –°–æ–∑–¥–∞—ë–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ö–æ—Ä–æ—à—É—é –º–æ–¥–µ–ª—å —Å AUC ~0.85
    true_labels = np.random.binomial(1, 0.2, n_samples)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π –∫ –∏—Å—Ç–∏–Ω–Ω—ã–º –º–µ—Ç–∫–∞–º
    noise = np.random.normal(0, 0.3, n_samples)
    raw_scores = true_labels * 2 + noise
    predictions = 1 / (1 + np.exp(-raw_scores))  # sigmoid
    
    return monthly_df, true_labels, predictions

def create_roc_curve(y_true, y_scores):
    """–°–æ–∑–¥–∞–Ω–∏–µ ROC –∫—Ä–∏–≤–æ–π."""
    fpr, tpr, _ = roc_curve(y_true, y_scores)
    roc_auc = auc(fpr, tpr)
    
    fig = go.Figure()
    
    # ROC –∫—Ä–∏–≤–∞—è
    fig.add_trace(go.Scatter(
        x=fpr, y=tpr,
        mode='lines',
        name=f'ROC –∫—Ä–∏–≤–∞—è (AUC = {roc_auc:.3f})',
        line=dict(color='#e74c3c', width=3)
    ))
    
    # –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è (—Å–ª—É—á–∞–π–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä)
    fig.add_trace(go.Scatter(
        x=[0, 1], y=[0, 1],
        mode='lines',
        name='–°–ª—É—á–∞–π–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä',
        line=dict(color='#95a5a6', width=2, dash='dash')
    ))
    
    fig.update_layout(
        title='ROC –ö—Ä–∏–≤–∞—è',
        xaxis_title='False Positive Rate',
        yaxis_title='True Positive Rate',
        template='plotly_white',
        height=450,  # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞
        margin=dict(l=60, r=20, t=80, b=90),  # –£–≤–µ–ª–∏—á–∏–ª–∏ –Ω–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –ª–µ–≥–µ–Ω–¥—ã
        showlegend=True,
        legend=dict(
            orientation="h",
            yanchor="top",
            y=-0.25,  # –î–∞–ª—å—à–µ –æ—Ç –ø–æ–¥–ø–∏—Å–∏ –æ—Å–∏
            xanchor="center",
            x=0.5,
            bgcolor='rgba(255,255,255,0.9)',
            bordercolor='rgba(0,0,0,0.3)',
            borderwidth=1
        )
    )
    
    return fig

def create_pr_curve(y_true, y_scores):
    """–°–æ–∑–¥–∞–Ω–∏–µ Precision-Recall –∫—Ä–∏–≤–æ–π."""
    precision, recall, _ = precision_recall_curve(y_true, y_scores)
    pr_auc = auc(recall, precision)
    
    fig = go.Figure()
    
    # PR –∫—Ä–∏–≤–∞—è
    fig.add_trace(go.Scatter(
        x=recall, y=precision,
        mode='lines',
        name=f'PR –∫—Ä–∏–≤–∞—è (AUC = {pr_auc:.3f})',
        line=dict(color='#3498db', width=3)
    ))
    
    # –ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è (–¥–æ–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤)
    baseline = np.sum(y_true) / len(y_true)
    fig.add_trace(go.Scatter(
        x=[0, 1], y=[baseline, baseline],
        mode='lines',
        name=f'–ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è (Precision = {baseline:.3f})',
        line=dict(color='#95a5a6', width=2, dash='dash')
    ))
    
    fig.update_layout(
        title='Precision-Recall –ö—Ä–∏–≤–∞—è',
        xaxis_title='Recall',
        yaxis_title='Precision',
        template='plotly_white',
        height=450,  # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞
        margin=dict(l=60, r=20, t=80, b=90),  # –£–≤–µ–ª–∏—á–∏–ª–∏ –Ω–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –ª–µ–≥–µ–Ω–¥—ã
        showlegend=True,
        legend=dict(
            orientation="h",
            yanchor="top",
            y=-0.25,  # –î–∞–ª—å—à–µ –æ—Ç –ø–æ–¥–ø–∏—Å–∏ –æ—Å–∏
            xanchor="center",
            x=0.5,
            bgcolor='rgba(255,255,255,0.9)',
            bordercolor='rgba(0,0,0,0.3)',
            borderwidth=1
        )
    )
    
    return fig

def create_monthly_data_chart(monthly_df):
    """–ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–µ—Å—è—Ü–∞–º."""
    fig = make_subplots(specs=[[{"secondary_y": True}]])
    
    # –°—Ç–æ–ª–±—Ü—ã –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
    fig.add_trace(
        go.Bar(
            x=monthly_df['month'],
            y=monthly_df['total_records'],
            name='–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
            marker_color='#3498db',
            opacity=0.7
        ),
        secondary_y=False,
    )
    
    # –°—Ç–æ–ª–±—Ü—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
    fig.add_trace(
        go.Bar(
            x=monthly_df['month'],
            y=monthly_df['positive_target'],
            name='–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã',
            marker_color='#e74c3c',
            opacity=0.8
        ),
        secondary_y=False,
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–µ–π
    fig.update_xaxes(title_text="–ú–µ—Å—è—Ü")
    fig.update_yaxes(title_text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π", secondary_y=False)
    
    fig.update_layout(
        title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–µ—Å—è—Ü–∞–º',
        template='plotly_white',
        height=500,
        barmode='group',
        legend=dict(
            orientation="h",
            yanchor="top", 
            y=-0.25,  # –î–∞–ª—å—à–µ –æ—Ç –ø–æ–¥–ø–∏—Å–∏ –æ—Å–∏
            xanchor="center",
            x=0.5,
            bgcolor='rgba(255,255,255,0.9)',
            bordercolor='rgba(0,0,0,0.3)',
            borderwidth=1
        )
    )
    
    return fig

def create_target_rate_chart(monthly_df):
    """–ì—Ä–∞—Ñ–∏–∫ —É—Ä–æ–≤–Ω—è —Ç–∞—Ä–≥–µ—Ç–∞ –ø–æ –º–µ—Å—è—Ü–∞–º."""
    fig = go.Figure()
    
    # –õ–∏–Ω–∏—è —É—Ä–æ–≤–Ω—è —Ç–∞—Ä–≥–µ—Ç–∞
    fig.add_trace(go.Scatter(
        x=monthly_df['month'],
        y=monthly_df['target_rate'] * 100,  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        mode='lines+markers',
        name='–£—Ä–æ–≤–µ–Ω—å —Ç–∞—Ä–≥–µ—Ç–∞',
        line=dict(color='#27ae60', width=3),
        marker=dict(size=8)
    ))
    
    # –°—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è
    avg_target = monthly_df['target_rate'].mean() * 100
    fig.add_trace(go.Scatter(
        x=monthly_df['month'],
        y=[avg_target] * len(monthly_df),
        mode='lines',
        name=f'–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å ({avg_target:.1f}%)',
        line=dict(color='#f39c12', width=2, dash='dash')
    ))
    
    fig.update_layout(
        title='–£—Ä–æ–≤–µ–Ω—å —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ –º–µ—Å—è—Ü–∞–º',
        xaxis_title='–ú–µ—Å—è—Ü',
        yaxis_title='–£—Ä–æ–≤–µ–Ω—å —Ç–∞—Ä–≥–µ—Ç–∞ (%)',
        template='plotly_white',
        height=500,
        showlegend=True,
        legend=dict(
            orientation="h",
            yanchor="top", 
            y=-0.25,  # –î–∞–ª—å—à–µ –æ—Ç –ø–æ–¥–ø–∏—Å–∏ –æ—Å–∏
            xanchor="center",
            x=0.5,
            bgcolor='rgba(255,255,255,0.9)',
            bordercolor='rgba(0,0,0,0.3)',
            borderwidth=1
        )
    )
    
    return fig

def create_feature_importance_chart():
    """–ì—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤."""
    features = [
        'age', 'income', 'credit_score', 'account_balance', 
        'transaction_count', 'days_since_last_transaction',
        'product_usage_score', 'customer_segment', 'region', 'device_type'
    ]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ (—Å—É–º–º–∞ = 1)
    importances = np.random.dirichlet(np.ones(len(features))) * 100
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    feature_imp_df = pd.DataFrame({
        'feature': features,
        'importance': importances
    }).sort_values('importance', ascending=True)
    
    fig = go.Figure(go.Bar(
        x=feature_imp_df['importance'],
        y=feature_imp_df['feature'],
        orientation='h',
        marker_color='#9b59b6'
    ))
    
    fig.update_layout(
        title='–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–æ–¥–µ–ª–∏',
        xaxis_title='–í–∞–∂–Ω–æ—Å—Ç—å (%)',
        yaxis_title='–ü—Ä–∏–∑–Ω–∞–∫',
        template='plotly_white',
        height=500,
        margin=dict(l=150, r=50, t=80, b=50)
    )
    
    return fig

def main():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –æ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è."""
    print("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á—ë—Ç –æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    monthly_df, y_true, y_scores = generate_sample_data()
    
    # –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç
    report = Report(
        title="–û—Ç—á—ë—Ç –æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
        description="–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π. "
                   "–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ 2023 –≥–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ –±—É—Å—Ç–∏–Ω–≥–∞.",
        footer="–ú–æ–¥–µ–ª—å —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω ‚Ä¢ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞: " + 
               datetime.now().strftime("%d.%m.%Y %H:%M")
    )
    
    # === –í–ö–õ–ê–î–ö–ê 1: –ö–ê–ß–ï–°–¢–í–û –ú–û–î–ï–õ–ò ===
    quality_tab = report.add_tab("–ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏")
    
    # –°—Ç—Ä–æ–∫–∞ 1x2: ROC –∏ PR –∫—Ä–∏–≤—ã–µ
    row1 = quality_tab.add_row("1x2")
    
    roc_fig = create_roc_curve(y_true, y_scores)
    row1.cells[0].add_plotly_figure(
        roc_fig,
        title="ROC –ö—Ä–∏–≤–∞—è",
        caption="–ö—Ä–∏–≤–∞—è ROC –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ TPR –∫ FPR –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä–æ–≥–∞—Ö"
    )
    
    pr_fig = create_pr_curve(y_true, y_scores)
    row1.cells[1].add_plotly_figure(
        pr_fig,
        title="Precision-Recall –ö—Ä–∏–≤–∞—è", 
        caption="PR –∫—Ä–∏–≤–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–∞ –¥–ª—è –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
    )
    
    # –°—Ç—Ä–æ–∫–∞ 1x3: –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    row2 = quality_tab.add_row("1x3")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
    
    y_pred = (y_scores > 0.5).astype(int)
    
    quality_metrics = {
        "AUC-ROC": f"{auc(*roc_curve(y_true, y_scores)[:2]):.3f}",
        "AUC-PR": f"{auc(*precision_recall_curve(y_true, y_scores)[:2]):.3f}",
        "Accuracy": f"{accuracy_score(y_true, y_pred):.3f}",
        "Precision": f"{precision_score(y_true, y_pred):.3f}",
        "Recall": f"{recall_score(y_true, y_pred):.3f}",
        "F1-Score": f"{f1_score(y_true, y_pred):.3f}"
    }
    
    row2.cells[0].add_kv(
        quality_metrics,
        title="–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞",
        caption="–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"
    )
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
    model_params = {
        "–ê–ª–≥–æ—Ä–∏—Ç–º": "XGBoost",
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤": "500",
        "–ì–ª—É–±–∏–Ω–∞": "6", 
        "Learning rate": "0.1",
        "–†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è": "L2 (0.01)",
        "–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è": "12 –º–∏–Ω"
    }
    
    row2.cells[1].add_kv(
        model_params,
        title="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏",
        caption="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data_stats = {
        "–†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏": "850,000",
        "–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏": "150,000", 
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤": "47",
        "–î–æ–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞": "12.3%",
        "–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è": "2.1%"
    }
    
    row2.cells[2].add_kv(
        data_stats,
        title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
        caption="–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞"
    )
    
    # === –í–ö–õ–ê–î–ö–ê 2: –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• ===
    data_tab = report.add_tab("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
    
    # –°—Ç—Ä–æ–∫–∞ 1x2: –ì—Ä–∞—Ñ–∏–∫–∏ –ø–æ –¥–∞–Ω–Ω—ã–º
    row3 = data_tab.add_row("1x2")
    
    monthly_chart = create_monthly_data_chart(monthly_df)
    row3.cells[0].add_plotly_figure(
        monthly_chart,
        title="–û–±—ä—ë–º –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–µ—Å—è—Ü–∞–º",
        caption="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"
    )
    
    target_chart = create_target_rate_chart(monthly_df)
    row3.cells[1].add_plotly_figure(
        target_chart,
        title="–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π",
        caption="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–∏"
    )
    
    # –°—Ç—Ä–æ–∫–∞ 1x1: –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    row4 = data_tab.add_row("1x1")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_df = monthly_df.copy()
    display_df['month'] = pd.to_datetime(display_df['month']).dt.strftime('%Y-%m')
    display_df['target_rate'] = (display_df['target_rate'] * 100).round(2)
    display_df.columns = ['–ú–µ—Å—è—Ü', '–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π', '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã', '–£—Ä–æ–≤–µ–Ω—å —Ç–∞—Ä–≥–µ—Ç–∞ (%)']
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    total_row = pd.DataFrame({
        '–ú–µ—Å—è—Ü': ['–ò–¢–û–ì–û'],
        '–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π': [display_df['–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π'].sum()],
        '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã': [display_df['–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã'].sum()],
        '–£—Ä–æ–≤–µ–Ω—å —Ç–∞—Ä–≥–µ—Ç–∞ (%)': [
            (display_df['–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã'].sum() / 
             display_df['–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π'].sum() * 100).round(2)
        ]
    })
    
    display_df = pd.concat([display_df, total_row], ignore_index=True)
    
    row4.cells[0].add_dataframe(
        display_df,
        title="–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º",
        caption="–ü–æ–º–µ—Å—è—á–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Ç–æ–≥–æ–≤—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏",
        index=False
    )
    
    # === –í–ö–õ–ê–î–ö–ê 3: –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø –ú–û–î–ï–õ–ò ===
    interpretation_tab = report.add_tab("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è")
    
    # –°—Ç—Ä–æ–∫–∞ 1x2: –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –≤—ã–≤–æ–¥—ã
    row5 = interpretation_tab.add_row("1x2")
    
    feature_imp_fig = create_feature_importance_chart()
    row5.cells[0].add_plotly_figure(
        feature_imp_fig,
        title="–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤",
        caption="–¢–æ–ø-10 –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"
    )
    
    row5.cells[1].add_markdown("""
## üéØ –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã

### –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏
- **AUC-ROC: 0.85** - –æ—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
- **AUC-PR: 0.72** - —Ö–æ—Ä–æ—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- **F1-Score: 0.68** - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ precision/recall

### –í–∞–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
1. **Credit Score** - –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞
2. **Income** - —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞
3. **Account Balance** - –±–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞
4. **Age** - –≤–æ–∑—Ä–∞—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞

### –°–µ–∑–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
- **–ó–∏–º–Ω–∏–µ –º–µ—Å—è—Ü—ã**: –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (+30%)
- **–õ–µ—Ç–Ω–∏–π –ø–µ—Ä–∏–æ–¥**: —Å–Ω–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (-20%)
- **–°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ç–∞—Ä–≥–µ—Ç**: 12.3% –≤ —Å—Ä–µ–¥–Ω–µ–º

### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è —Å–∫–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
- –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å drift –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –µ–∂–µ–º–µ—Å—è—á–Ω–æ
- –ü–µ—Ä–µ–æ–±—É—á–∞—Ç—å –º–æ–¥–µ–ª—å –∫–∞–∂–¥—ã–µ 3 –º–µ—Å—è—Ü–∞
    """, title="–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # –°—Ç—Ä–æ–∫–∞ 1x1: –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
    row6 = interpretation_tab.add_row("1x1")
    
    from sklearn.metrics import confusion_matrix
    cm = confusion_matrix(y_true, y_pred)
    
    confusion_fig = go.Figure(data=go.Heatmap(
        z=cm,
        x=['Predicted 0', 'Predicted 1'],
        y=['Actual 0', 'Actual 1'],
        colorscale='Blues',
        text=cm,
        texttemplate="%{text}",
        textfont={"size": 20},
        showscale=True
    ))
    
    confusion_fig.update_layout(
        title='–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫',
        xaxis_title='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å',
        yaxis_title='–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å',
        template='plotly_white',
        height=400,
        margin=dict(l=80, r=50, t=80, b=80)
    )
    
    row6.cells[0].add_plotly_figure(
        confusion_fig,
        title="–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫",
        caption="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
    report.save("ml_model_report.html")
    print("‚úÖ –û—Ç—á—ë—Ç –æ –º–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª: ml_model_report.html")
    print("üìä –û—Ç—á—ë—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç:")
    print("   ‚Ä¢ ROC –∏ Precision-Recall –∫—Ä–∏–≤—ã–µ")
    print("   ‚Ä¢ –¢–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –º–µ—Å—è—Ü–∞–º") 
    print("   ‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ —É—Ä–æ–≤–Ω—è —Ç–∞—Ä–≥–µ—Ç–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
    print("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    print("   ‚Ä¢ –ú–∞—Ç—Ä–∏—Ü—É –æ—à–∏–±–æ–∫ –∏ –≤—ã–≤–æ–¥—ã")

if __name__ == "__main__":
    main()
