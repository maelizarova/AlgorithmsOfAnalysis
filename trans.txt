import pandas as pd
import numpy as np
import plotly.graph_objects as go
from typing import Optional, Tuple

def plot_counts_and_rate_over_time_plotly(
    data: pd.DataFrame,
    date_col: str,                 # колонка с датой исходных событий
    target_col: str,               # колонка с таргетом (0/1 или доля)
    count_col: Optional[str] = None, # если None — считаем строки; иначе суммируем эту колонку
    id_col: Optional[str] = None,    # если задано — считаем уникальные id вместо строк
    title: str = "Размеры и Target rate по месяцам",
    count_series_name: str = "Всего открытых автокредитов",
    rate_series_name: str = "Target rate",
    show: bool = True
) -> Tuple[pd.DataFrame, "go.Figure"]:
    """
    Возвращает:
      df_agg: month, count, rate
      fig: plotly Figure

    Правила агрегации:
      - month = начало месяца
      - count: id_col → nunique; elif count_col → sum; else → количество строк
      - rate: mean(target_col)  (если 0/1 — это доля)
    """
    df = data.copy()
    df[date_col] = pd.to_datetime(df[date_col], errors="coerce")
    df = df.dropna(subset=[date_col])

    # Нормализуем к началу месяца
    df["month"] = df[date_col].dt.to_period("M").dt.to_timestamp()

    agg_dict = {}
    if id_col:
        agg_dict["count"] = (id_col, pd.Series.nunique)
    elif count_col:
        agg_dict["count"] = (count_col, "sum")
    else:
        agg_dict["count"] = (target_col, "size")

    # доля таргета
    agg_dict["rate"] = (target_col, "mean")

    df_agg = (df.groupby("month", as_index=False)
                .agg(**agg_dict)
                .sort_values("month"))

    # форматированные подписи
    def fmt_thousands(n: float) -> str:
        # 1 906 — как в Excel-примере
        s = f"{int(round(n)):,}"
        return s.replace(",", " ")

    bar_text = [fmt_thousands(v) for v in df_agg["count"]]
    line_text = [f"{int(round(r*100))}%" if pd.notna(r) else "" for r in df_agg["rate"]]

    fig = go.Figure()

    # Столбики (левая ось)
    fig.add_bar(
        x=df_agg["month"], y=df_agg["count"],
        name=count_series_name,
        text=bar_text,
        textposition="outside",
        marker=dict(line=dict(width=0))
    )

    # Линия (правая ось, в долях; ось отрисует проценты)
    fig.add_trace(go.Scatter(
        x=df_agg["month"], y=df_agg["rate"],
        mode="lines+markers+text",
        name=rate_series_name,
        yaxis="y2",
        text=line_text,
        textposition="top center",
        line=dict(width=3, color="#D62728"),  # красная линия, как на скрине
        marker=dict(size=8, line=dict(width=1, color="white"))
    ))

    fig.update_layout(
        title=title,
        xaxis=dict(title=None, tickangle=45),
        yaxis=dict(title="Количество клиентов", tickformat=",.0f"),
        yaxis2=dict(title="RR, %", overlaying="y", side="right", tickformat=".0%"),
        bargap=0.25,
        template="plotly_white",
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
        margin=dict(t=70, r=40, b=60, l=60)
    )

    if show:
        fig.show()

    return df_agg, fig
