import numpy as np
import pandas as pd
from sklearn.metrics import confusion_matrix
import plotly.graph_objects as go
from typing import Tuple, Sequence, Optional

def plot_confusion_matrix_plotly_simple(
    y_true: Sequence,
    y_pred: Optional[Sequence] = None,
    y_score: Optional[Sequence] = None,
    threshold: float = 0.5,
    title: str = "Confusion matrix"
) -> Tuple[pd.DataFrame, go.Figure]:
    y_true = np.asarray(y_true)

    if y_pred is None:
        if y_score is None:
            raise ValueError("Передай либо y_pred, либо y_score + threshold.")
        y_score = np.asarray(y_score)
        if y_score.ndim != 1:
            raise ValueError("y_score должен быть 1D (например, y_proba[:, 1]).")
        y_pred = (y_score >= threshold).astype(int)
    else:
        y_pred = np.asarray(y_pred)

    # фиксируем порядок меток по объединению y_true и y_pred
    labels = np.unique(np.concatenate([y_true, y_pred]))

    cm = confusion_matrix(y_true, y_pred, labels=labels)  # абсолюты
    df_cm = pd.DataFrame(cm, index=labels, columns=labels)

    fig = go.Figure(
        data=go.Heatmap(
            z=df_cm.values,
            x=[str(x) for x in df_cm.columns],
            y=[str(y) for y in df_cm.index],
            colorscale="Blues",
            colorbar=dict(title="Count"),
            text=df_cm.values.astype(int),
            texttemplate="%{text}",
            textfont=dict(size=12),
            hovertemplate="True: %{y}<br>Pred: %{x}<br>Count: %{z}<extra></extra>"
        )
    )
    fig.update_layout(
        title=title,
        xaxis=dict(title="Predicted"),
        yaxis=dict(title="True", autorange="reversed"),
        template="plotly_white",
        margin=dict(t=70, r=40, b=60, l=70)
    )

    return df_cm, fig
