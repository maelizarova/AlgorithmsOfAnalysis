import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
import pandas as pd

def plot_model_performance(y_true, y_pred, log_scale=False, exclude_zeros=False, quantile_range=None):
    """
    Стабильная версия с единообразными подписями осей.
    
    Параметры:
    ----------
    y_true : array-like
    y_pred : array-like
    log_scale : bool (default=False)
    exclude_zeros : bool (default=False)
    quantile_range : tuple (default=None)
    """
    
    # Подготовка данных
    df = pd.DataFrame({'y_true': y_true, 'y_pred': y_pred})
    
    if exclude_zeros:
        df = df[df['y_true'] != 0]
    
    if quantile_range is not None:
        low_q, high_q = quantile_range
        mask = (df['y_true'] >= df['y_true'].quantile(low_q)) & \
               (df['y_true'] <= df['y_true'].quantile(high_q))
        df = df[mask]
    
    errors = df['y_true'] - df['y_pred']
    
    # Общие настройки для логарифмических подписей
    log_tickvals = [-3, -2, -1, 0, 1, 2, 3]
    log_ticktext = ['10⁻³', '10⁻²', '10⁻¹', '10⁰', '10¹', '10²', '10³']

    # Создаем фигуру
    fig = make_subplots(
        rows=3, cols=1,
        subplot_titles=(
            '1. Распределение ошибок (y_true - y_pred)',
            '2. Сравнение y_true и y_pred',
            '3. KDE распределения (log10)'
        ),
        vertical_spacing=0.15
    )

    # 1. Боксплот ошибок
    fig.add_trace(
        go.Box(
            x=errors,
            name='Ошибки',
            orientation='h',
            boxpoints=False,
            marker_color='lightseagreen'
        ),
        row=1, col=1
    )

    # 2. Scatter plot
    fig.add_trace(
        go.Scatter(
            x=df['y_true'],
            y=df['y_pred'],
            mode='markers',
            marker=dict(size=5, opacity=0.3, color='steelblue'),
            name='Предсказания'
        ),
        row=2, col=1
    )
    fig.add_trace(
        go.Scatter(
            x=[df['y_true'].min(), df['y_true'].max()],
            y=[df['y_true'].min(), df['y_true'].max()],
            mode='lines',
            line=dict(color='crimson', dash='dash'),
            name='Идеальная линия'
        ),
        row=2, col=1
    )

    # 3. KDE plot
    for name, color, column in [('y_true', 'navy', 'y_true'), ('y_pred', 'darkorange', 'y_pred')]:
        hist, bins = np.histogram(np.log10(df[column][df[column] > 0]), bins=50, density=True)
        fig.add_trace(
            go.Scatter(
                x=bins[:-1],
                y=hist,
                mode='lines',
                fill='tozeroy',
                name=name,
                line=dict(color=color, width=1.5),
                opacity=0.7
            ),
            row=3, col=1
        )

    # Настройка осей
    if log_scale:
        fig.update_xaxes(type='log', row=2, col=1)
        fig.update_yaxes(type='log', row=2, col=1)
        
        # Подписи для боксплота
        fig.update_xaxes(
            tickvals=[10**x for x in log_tickvals],
            ticktext=log_ticktext,
            row=1, col=1
        )

    # Фиксированные подписи для KDE (всегда log10)
    fig.update_xaxes(
        tickvals=log_tickvals,
        ticktext=log_ticktext,
        row=3, col=1
    )

    # Общие настройки
    fig.update_layout(
        height=900,
        width=700,
        margin=dict(l=50, r=50, b=50, t=50),
        showlegend=True,
        plot_bgcolor='white'
    )
    
    # Единообразные подписи осей
    fig.update_xaxes(title_text="Ошибка" + (" (log10)" if log_scale else ""), row=1, col=1)
    fig.update_xaxes(title_text="y_true" + (" (log10)" if log_scale else ""), row=2, col=1)
    fig.update_yaxes(title_text="y_pred" + (" (log10)" if log_scale else ""), row=2, col=1)
    fig.update_xaxes(title_text="log10(Значение)", row=3, col=1)
    fig.update_yaxes(title_text="Плотность", row=3, col=1)

    return fig
