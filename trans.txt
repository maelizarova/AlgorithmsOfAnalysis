import numpy as np
import pandas as pd
from sklearn.metrics import roc_curve, roc_auc_score
import plotly.graph_objects as go
from typing import Tuple

def plot_roc_curve_plotly_simple(
    y_true,
    y_score,
    title: str = "ROC curve"
) -> Tuple[pd.DataFrame, go.Figure]:
    """
    Простой ROC-график для одной модели (бинарная классификация).
    Вход:
      - y_true: 1D массив истинных меток (0/1)
      - y_score: 1D массив скорингов/вероятностей ПОЛОЖИТЕЛЬНОГО класса
    Выход:
      - df_points: DataFrame с FPR/TPR/threshold/AUC
      - fig: plotly Figure
    """
    y_true  = np.asarray(y_true)
    y_score = np.asarray(y_score)

    if y_score.ndim != 1:
        raise ValueError("Ожидается 1D массив y_score (например, y_proba[:, 1]).")

    fpr, tpr, thr = roc_curve(y_true, y_score, pos_label=1)
    auc = roc_auc_score(y_true, y_score)

    df_points = pd.DataFrame({
        "fpr": fpr,
        "tpr": tpr,
        "threshold": thr
    })
    df_points["auc"] = auc

    # Линия 'chance'
    chance = go.Scatter(
        x=[0, 1], y=[0, 1],
        mode="lines",
        name="Chance",
        line=dict(width=2, dash="dash", color="#999"),
        hoverinfo="skip"
    )

    roc_trace = go.Scatter(
        x=fpr, y=tpr,
        mode="lines",
        name=f"ROC (AUC={auc:.3f})",
        hovertemplate="FPR: %{x:.3f}<br>TPR: %{y:.3f}<br>Threshold: %{customdata:.3f}",
        customdata=thr,
        line=dict(width=3)
    )

    fig = go.Figure([chance, roc_trace])
    fig.update_layout(
        title=title,
        xaxis=dict(title="False Positive Rate (FPR)", range=[0, 1]),
        yaxis=dict(title="True Positive Rate (TPR)",  range=[0, 1]),
        template="plotly_white",
        legend=dict(orientation="h", y=1.02, x=1, xanchor="right", yanchor="bottom"),
        margin=dict(t=70, r=40, b=50, l=60),
        hovermode="x unified"
    )

    return df_points, fig
