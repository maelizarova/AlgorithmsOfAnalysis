def select_top_features(
    data: pd.DataFrame,
    targets: List[str],
    model: BaseEstimator,
    eval_set: Optional[pd.DataFrame] = None,
    n_top: int = 10,
    categorical_features: Optional[List[str]] = None,
    preprocess_categorical: bool = True,
    early_stopping_rounds: Optional[int] = None,
    random_state: int = 42,
    fit_params: Optional[dict] = None
) -> Dict[str, List[str]]:
    """
    Универсальная функция для отбора наиболее значимых признаков с использованием заданной модели.
    
    Параметры:
    ----------
    data : pd.DataFrame
        Входной DataFrame с признаками и целевыми переменными.
    targets : List[str]
        Список имен целевых переменных.
    model : BaseEstimator
        Модель машинного обучения, реализующая scikit-learn API.
    eval_set : Optional[pd.DataFrame], default=None
        Дополнительный набор данных для оценки.
    n_top : int, default=10
        Количество лучших признаков для отбора.
    categorical_features : Optional[List[str]], default=None
        Список категориальных признаков.
    preprocess_categorical : bool, default=True
        Флаг предобработки категориальных признаков.
    early_stopping_rounds : Optional[int], default=None
        Количество раундов для ранней остановки.
    random_state : int, default=42
        Seed для воспроизводимости результатов.
    fit_params : Optional[dict], default=None
        Дополнительные параметры для метода fit() модели.
        Пример: {'eval_metric': 'rmse', 'verbose': True}
    
    Возвращает:
    -----------
    Dict[str, List[str]]
        Словарь, где ключи - имена целевых переменных, 
        а значения - списки отобранных признаков для каждой целевой переменной.
    
    Пример использования:
    ---------------------
    >>> from sklearn.ensemble import RandomForestRegressor
    >>> import pandas as pd
    >>>
    >>> data = pd.DataFrame({
    ...     'feature1': [1, 2, 3, 4],
    ...     'feature2': [4, 3, 2, 1],
    ...     'target': [0.5, 0.3, 0.8, 0.1]
    ... })
    >>>
    >>> model = RandomForestRegressor(random_state=42)
    >>> selected_features = select_top_features(
    ...     data=data,
    ...     targets=['target'],
    ...     model=model,
    ...     n_top=1,
    ...     random_state=42
    ... )
    >>> print(selected_features)
    {'target': ['feature1']}
    """
    # Реализация функции...
    pass
