import pandas as pd
import numpy as np
from sklearn.metrics import roc_auc_score
import plotly.graph_objects as go
from typing import Tuple

def plot_gini_by_month_plotly(
    data: pd.DataFrame,
    date_col: str,      # колонка с датой
    target_col: str,    # 0/1
    score_col: str,     # вероятность/скор позитивного класса
    title: str = "Gini by months",
) -> Tuple[pd.DataFrame, "go.Figure"]:
    """
    Строит график: слева CNT (столбики), справа GINI (линия).
    Gini для каждого месяца = 2 * AUC - 1.
    Возвращает (df_agg, fig).
    """
    df = data[[date_col, target_col, score_col]].copy()
    df[date_col] = pd.to_datetime(df[date_col], errors="coerce")
    df = df.dropna(subset=[date_col])

    # месяц = начало месяца
    df["month"] = df[date_col].dt.to_period("M").dt.to_timestamp()

    # cnt по месяцам
    agg_cnt = df.groupby("month", as_index=False).agg(cnt=(target_col, "size"))

    # gini по месяцам
    def _gini_month(gr: pd.DataFrame) -> float:
        y = gr[target_col].values
        s = gr[score_col].values
        if len(np.unique(y)) < 2:
            return np.nan  # AUC не определён, если в месяце один класс
        auc = roc_auc_score(y, s)
        return 2 * auc - 1

    gini = df.groupby("month").apply(_gini_month).reset_index(name="gini")

    df_agg = (
        agg_cnt.merge(gini, on="month", how="left")
               .sort_values("month")
               .reset_index(drop=True)
    )

    # --- Plotly ---
    fig = go.Figure()
    fig.add_bar(
        x=df_agg["month"], y=df_agg["cnt"],
        name="CNT",
        marker_color="royalblue", opacity=0.9
    )
    fig.add_trace(go.Scatter(
        x=df_agg["month"], y=df_agg["gini"],
        mode="lines+markers",
        name="GINI",
        yaxis="y2",
        line=dict(width=3, color="green"),
        marker=dict(size=7, line=dict(width=1, color="white"))
    ))

    fig.update_layout(
        title=title,
        xaxis=dict(title=None, tickangle=45),
        yaxis=dict(title="CNT", tickformat=",.0f", color="royalblue",
                   titlefont=dict(color="royalblue")),
        yaxis2=dict(title="GINI", overlaying="y", side="right",
                    range=[0, 1], tickformat=".2f",
                    color="green", titlefont=dict(color="green")),
        template="plotly_white",
        legend=dict(orientation="h", yanchor="bottom", y=1.02,
                    xanchor="right", x=1),
        margin=dict(t=70, r=70, b=70, l=70),
    )

    return df_agg[["month", "cnt", "gini"]], fig
