import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
import pandas as pd
import plotly.express as px

def plot_model_performance_v2(y_true, y_pred, file_nm, log_scale=False, exclude_zeros=False, quantile_range=None):
    """
    Функция для визуализации качества модели с улучшенным KDE графиком
    
    Параметры:
    ----------
    y_true : array-like
        Истинные значения целевой переменной
    y_pred : array-like
        Предсказанные значения модели
    log_scale : bool, optional (default=False)
        Если True, применяет логарифмирование к осям (log10)
    exclude_zeros : bool, optional (default=False)
        Если True, исключает записи где y_true == 0
    quantile_range : tuple, optional (default=None)
        Диапазон квантилей для отбора данных (например, (0.05, 0.95))
    """
    
    # Создаем DataFrame и фильтруем данные
    df = pd.DataFrame({'y_true': y_true, 'y_pred': y_pred})
    
    if exclude_zeros:
        df = df[df['y_true'] != 0]
    
    if quantile_range is not None:
        low_q, high_q = quantile_range
        mask = (df['y_true'] >= df['y_true'].quantile(low_q)) & \
               (df['y_true'] <= df['y_true'].quantile(high_q))
        df = df[mask]
    
    # Вычисляем ошибки
    errors = df['y_true'] - df['y_pred']
    
    # Логарифмируем данные для KDE если требуется
    log_df = pd.DataFrame({
        'log_y_true': np.log10(df['y_true'][df['y_true'] > 0] + 1e-10),
        'log_y_pred': np.log10(df['y_pred'][df['y_pred'] > 0] + 1e-10)
    }).melt()
    
    # Создаем фигуру с 3 вертикальными subplots
    fig = make_subplots(
        rows=3, cols=1,
        subplot_titles=(
            '1. Распределение ошибок (y_true - y_pred)',
            '2. Сравнение истинных и предсказанных значений',
            '3. Распределения y_true и y_pred в log10-шкале'
        ),
        vertical_spacing=0.1
    )
    
    # 1. Боксплот ошибок (горизонтальный)
    fig.add_trace(
        go.Box(
            x=errors,
            name='Ошибки',
            orientation='h',
            boxpoints=False
        ),
        row=1, col=1
    )
    
    # 2. Scatter plot y_true vs y_pred
    scatter = go.Scatter(
        x=df['y_true'],
        y=df['y_pred'],
        mode='markers',
        marker=dict(size=5, opacity=0.3, color='rgba(100, 149, 237, 0.6)'),
        name='Предсказания'
    )
    
    line = go.Scatter(
        x=[df['y_true'].min(), df['y_true'].max()],
        y=[df['y_true'].min(), df['y_true'].max()],
        mode='lines',
        line=dict(color='red', dash='dash'),
        name='Идеальное предсказание'
    )
    
    fig.add_trace(scatter, row=2, col=1)
    fig.add_trace(line, row=2, col=1)
    
    # 3. Новый KDE plot через гистограмму с rug plot
    for variable, color in zip(['log_y_true', 'log_y_pred'], ['blue', 'orange']):
        fig.add_trace(
            go.Histogram(
                x=log_df[log_df['variable'] == variable]['value'],
                name=variable,
                marker_color=color,
                opacity=0.5,
                histnorm='probability density',
                nbinsx=100
            ),
            row=3, col=1
        )
        
        # Rug plot
        fig.add_trace(
            go.Scatter(
                x=log_df[log_df['variable'] == variable]['value'],
                y=[0]*len(log_df[log_df['variable'] == variable]),
                mode='markers',
                marker=dict(size=2, color=color),
                name=f'{variable} (rug)',
                showlegend=False
            ),
            row=3, col=1
        )
    
    # Настройка осей
    if log_scale:
        fig.update_xaxes(type='log', row=2, col=1)
        fig.update_yaxes(type='log', row=2, col=1)
        
    # Форматирование log10 оси для KDE графика
    fig.update_xaxes(
        title_text="log10(Значение)",
        row=3, col=1,
        tickvals=[-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6],
        ticktext=['1µ', '10µ', '100µ', '1m', '10m', '100m', '1', '10', '100', '1k', '10k', '100k', '1M']
    )

    fig.update_xaxes(
        row=3, col=1,
        type='log',
        title_text="Значение",
        tickformat="s",  # Автоматически использует k, M, G и т.д.
        tickvals=[1, 10, 100, 1e3, 1e4, 1e5, 1e6],  # 1, 10, 100, 1k, 10k, 100k, 1M
        range=[0, 6]  # Диапазон log10 (10⁰ до 10⁶)
    )
    
    # Общие настройки
    fig.update_layout(
        height=1200,
        width=800,
        title_text="Анализ качества модели",
        barmode='overlay'
    )
    
    # Подписи осей
    fig.update_xaxes(title_text="Ошибка (y_true - y_pred)", row=1, col=1)
    fig.update_xaxes(title_text="y_true", row=2, col=1)
    fig.update_yaxes(title_text="y_pred", row=2, col=1)
    fig.update_yaxes(title_text="Плотность вероятности", row=3, col=1)
    
    fig.write_html(file_nm)
