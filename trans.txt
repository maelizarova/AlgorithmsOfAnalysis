-- 1. Дом и ремонт
execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_1 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_dom_rem_trans_cnt_1m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_dom_rem_trans_sum_1m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_dom_rem_trans_max_1m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_dom_rem_trans_min_1m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_dom_rem_trans_cnt_3m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_dom_rem_trans_sum_3m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_dom_rem_trans_max_3m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_dom_rem_trans_min_3m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_dom_rem_trans_cnt_6m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_dom_rem_trans_sum_6m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_dom_rem_trans_max_6m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_dom_rem_trans_min_6m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_dom_rem_trans_cnt_12m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_dom_rem_trans_sum_12m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_dom_rem_trans_max_12m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_dom_rem_trans_min_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE null END) AS transaction_dom_rem_trans_avg_sum_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE null END) AS transaction_dom_rem_trans_avg_sum_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE null END) AS transaction_dom_rem_trans_avg_sum_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE null END) AS transaction_dom_rem_trans_avg_sum_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_dom_rem_trans_avg_cnt_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_dom_rem_trans_avg_cnt_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_dom_rem_trans_avg_cnt_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_dom_rem_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Дом и ремонт'' and direction = ''D'' 
group by client_did, report_date
';

-- 2. Кафе и рестораны
execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_2 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_cafe_trans_cnt_1m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_cafe_trans_sum_1m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_cafe_trans_max_1m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_cafe_trans_min_1m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_cafe_trans_cnt_3m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_cafe_trans_sum_3m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_cafe_trans_max_3m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_cafe_trans_min_3m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_cafe_trans_cnt_6m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_cafe_trans_sum_6m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_cafe_trans_max_6m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_cafe_trans_min_6m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_cafe_trans_cnt_12m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_cafe_trans_sum_12m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_cafe_trans_max_12m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_cafe_trans_min_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE null END) AS transaction_cafe_trans_avg_sum_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE null END) AS transaction_cafe_trans_avg_sum_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE null END) AS transaction_cafe_trans_avg_sum_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE null END) AS transaction_cafe_trans_avg_sum_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_cafe_trans_avg_cnt_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_cafe_trans_avg_cnt_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_cafe_trans_avg_cnt_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_cafe_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Кафе и рестораны'' and direction = ''D'' 
group by client_did, report_date
';

-- 3. Аренда авто
execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_RENT_3 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_rent_auto_trans_cnt_1m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_rent_auto_trans_sum_1m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_rent_auto_trans_max_1m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_rent_auto_trans_min_1m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_rent_auto_trans_cnt_3m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_rent_auto_trans_sum_3m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_rent_auto_trans_max_3m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_rent_auto_trans_min_3m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_rent_auto_trans_cnt_6m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_rent_auto_trans_sum_6m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_rent_auto_trans_max_6m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_rent_auto_trans_min_6m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_rent_auto_trans_cnt_12m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_rent_auto_trans_sum_12m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_rent_auto_trans_max_12m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_rent_auto_trans_min_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE null END) AS transaction_rent_auto_trans_avg_sum_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE null END) AS transaction_rent_auto_trans_avg_sum_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE null END) AS transaction_rent_auto_trans_avg_sum_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE null END) AS transaction_rent_auto_trans_avg_sum_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_rent_auto_trans_avg_cnt_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_rent_auto_trans_avg_cnt_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_rent_auto_trans_avg_cnt_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_rent_auto_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Аренда авто'' and direction = ''D'' 
group by client_did, report_date
';

-- 4. Транспорт
execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_4 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_transport_trans_cnt_1m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_transport_trans_sum_1m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_transport_trans_max_1m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_transport_trans_min_1m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_transport_trans_cnt_3m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_transport_trans_sum_3m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_transport_trans_max_3m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_transport_trans_min_3m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_transport_trans_cnt_6m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_transport_trans_sum_6m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_transport_trans_max_6m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_transport_trans_min_6m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_transport_trans_cnt_12m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_transport_trans_sum_12m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_transport_trans_max_12m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_transport_trans_min_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE null END) AS transaction_transport_trans_avg_sum_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE null END) AS transaction_transport_trans_avg_sum_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE null END) AS transaction_transport_trans_avg_sum_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE null END) AS transaction_transport_trans_avg_sum_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_transport_trans_avg_cnt_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_transport_trans_avg_cnt_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_transport_trans_avg_cnt_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_transport_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Транспорт'' and direction = ''D'' 
group by client_did, report_date
';

-- 5. Путешествия
execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_5 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_travel_trans_cnt_1m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_travel_trans_sum_1m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_travel_trans_max_1m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_travel_trans_min_1m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_travel_trans_cnt_3m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_travel_trans_sum_3m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_travel_trans_max_3m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_travel_trans_min_3m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_travel_trans_cnt_6m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_travel_trans_sum_6m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_travel_trans_max_6m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_travel_trans_min_6m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_travel_trans_cnt_12m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_travel_trans_sum_12m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_travel_trans_max_12m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_travel_trans_min_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE null END) AS transaction_travel_trans_avg_sum_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE null END) AS transaction_travel_trans_avg_sum_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE null END) AS transaction_travel_trans_avg_sum_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE null END) AS transaction_travel_trans_avg_sum_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_travel_trans_avg_cnt_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_travel_trans_avg_cnt_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_travel_trans_avg_cnt_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_travel_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Путешествия'' and direction = ''D'' 
group by client_did, report_date
';

-- 6. Медицина
execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_6 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_medicine_trans_cnt_1m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_medicine_trans_sum_1m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_medicine_trans_max_1m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_medicine_trans_min_1m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_medicine_trans_cnt_3m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_medicine_trans_sum_3m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_medicine_trans_max_3m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_medicine_trans_min_3m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_medicine_trans_cnt_6m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_medicine_trans_sum_6m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_medicine_trans_max_6m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_medicine_trans_min_6m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_medicine_trans_cnt_12m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_medicine_trans_sum_12m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_medicine_trans_max_12m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_medicine_trans_min_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE null END) AS transaction_medicine_trans_avg_sum_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE null END) AS transaction_medicine_trans_avg_sum_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE null END) AS transaction_medicine_trans_avg_sum_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE null END) AS transaction_medicine_trans_avg_sum_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_medicine_trans_avg_cnt_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_medicine_trans_avg_cnt_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_medicine_trans_avg_cnt_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_medicine_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Медицина'' and direction = ''D'' 
group by client_did, report_date
';

-- 7. Онлайн магазины
execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_7 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_online_shops_trans_cnt_1m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_online_shops_trans_sum_1m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_online_shops_trans_max_1m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_online_shops_trans_min_1m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_online_shops_trans_cnt_3m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_online_shops_trans_sum_3m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_online_shops_trans_max_3m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_online_shops_trans_min_3m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_online_shops_trans_cnt_6m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_online_shops_trans_sum_6m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_online_shops_trans_max_6m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_online_shops_trans_min_6m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_online_shops_trans_cnt_12m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_online_shops_trans_sum_12m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_online_shops_trans_max_12m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_online_shops_trans_min_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE null END) AS transaction_online_shops_trans_avg_sum_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE null END) AS transaction_online_shops_trans_avg_sum_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE null END) AS transaction_online_shops_trans_avg_sum_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE null END) AS transaction_online_shops_trans_avg_sum_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_online_shops_trans_avg_cnt_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_online_shops_trans_avg_cnt_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_online_shops_trans_avg_cnt_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_online_shops_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Онлайн магазины'' and direction = ''D'' 
group by client_did, report_date
';

-- 8. Музыка
execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_8 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_music_trans_cnt_1m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_music_trans_sum_1m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_music_trans_max_1m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_music_trans_min_1m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_music_trans_cnt_3m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_music_trans_sum_3m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_music_trans_max_3m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_music_trans_min_3m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_music_trans_cnt_6m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_music_trans_sum_6m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_music_trans_max_6m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_music_trans_min_6m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_music_trans_cnt_12m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_music_trans_sum_12m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_music_trans_max_12m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_music_trans_min_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE null END) AS transaction_music_trans_avg_sum_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE null END) AS transaction_music_trans_avg_sum_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE null END) AS transaction_music_trans_avg_sum_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE null END) AS transaction_music_trans_avg_sum_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_music_trans_avg_cnt_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_music_trans_avg_cnt_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_music_trans_avg_cnt_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_music_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Музыка'' and direction = ''D'' 
group by client_did, report_date
';

-- 9. Ломбарды
execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_9 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_lombards_trans_cnt_1m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_lombards_trans_sum_1m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_lombards_trans_max_1m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_lombards_trans_min_1m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_lombards_trans_cnt_3m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_lombards_trans_sum_3m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_lombards_trans_max_3m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_lombards_trans_min_3m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_lombards_trans_cnt_6m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_lombards_trans_sum_6m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_lombards_trans_max_6m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_lombards_trans_min_6m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_lombards_trans_cnt_12m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_lombards_trans_sum_12m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_lombards_trans_max_12m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_lombards_trans_min_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE null END) AS transaction_lombards_trans_avg_sum_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE null END) AS transaction_lombards_trans_avg_sum_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE null END) AS transaction_lombards_trans_avg_sum_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE null END) AS transaction_lombards_trans_avg_sum_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_lombards_trans_avg_cnt_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_lombards_trans_avg_cnt_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_lombards_trans_avg_cnt_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_lombards_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Ломбарды'' and direction = ''D'' 
group by client_did, report_date
';

-- 10. Зоомагазины
execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_10 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_zoo_trans_cnt_1m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_zoo_trans_sum_1m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_zoo_trans_max_1m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_zoo_trans_min_1m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_zoo_trans_cnt_3m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_zoo_trans_sum_3m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_zoo_trans_max_3m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_zoo_trans_min_3m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_zoo_trans_cnt_6m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_zoo_trans_sum_6m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_zoo_trans_max_6m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_zoo_trans_min_6m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_zoo_trans_cnt_12m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_zoo_trans_sum_12m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_zoo_trans_max_12m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_zoo_trans_min_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE null END) AS transaction_zoo_trans_avg_sum_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE null END) AS transaction_zoo_trans_avg_sum_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE null END) AS transaction_zoo_trans_avg_sum_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE null END) AS transaction_zoo_trans_avg_sum_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_zoo_trans_avg_cnt_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_zoo_trans_avg_cnt_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_zoo_trans_avg_cnt_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_zoo_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Зоомагазины'' and direction = ''D'' 
group by client_did, report_date
';

-- 11. Авиабилеты
execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_11 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_air_tickets_trans_cnt_1m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_air_tickets_trans_sum_1m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_air_tickets_trans_max_1m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_air_tickets_trans_min_1m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_air_tickets_trans_cnt_3m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_air_tickets_trans_sum_3m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_air_tickets_trans_max_3m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_air_tickets_trans_min_3m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_air_tickets_trans_cnt_6m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_air_tickets_trans_sum_6m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_air_tickets_trans_max_6m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_air_tickets_trans_min_6m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_air_tickets_trans_cnt_12m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_air_tickets_trans_sum_12m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_air_tickets_trans_max_12m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_air_tickets_trans_min_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE null END) AS transaction_air_tickets_trans_avg_sum_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE null END) AS transaction_air_tickets_trans_avg_sum_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE null END) AS transaction_air_tickets_trans_avg_sum_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE null END) AS transaction_air_tickets_trans_avg_sum_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_air_tickets_trans_avg_cnt_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_air_tickets_trans_avg_cnt_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_air_tickets_trans_avg_cnt_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_air_tickets_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Авиабилеты'' and direction = ''D'' 
group by client_did, report_date
';

-- 12. Гостиницы
execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_12 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_hotels_trans_cnt_1m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_hotels_trans_sum_1m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_hotels_trans_max_1m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_hotels_trans_min_1m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_hotels_trans_cnt_3m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_hotels_trans_sum_3m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_hotels_trans_max_3m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_hotels_trans_min_3m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_hotels_trans_cnt_6m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_hotels_trans_sum_6m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_hotels_trans_max_6m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_hotels_trans_min_6m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_hotels_trans_cnt_12m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_hotels_trans_sum_12m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_hotels_trans_max_12m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_hotels_trans_min_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE null END) AS transaction_hotels_trans_avg_sum_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE null END) AS transaction_hotels_trans_avg_sum_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE null END) AS transaction_hotels_trans_avg_sum_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE null END) AS transaction_hotels_trans_avg_sum_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_hotels_trans_avg_cnt_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_hotels_trans_avg_cnt_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_hotels_trans_avg_cnt_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_hotels_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Гостиницы'' and direction = ''D'' 
group by client_did, report_date
';

-- 13. Услуги курьера
execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_13 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_courier_trans_cnt_1m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_courier_trans_sum_1m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_courier_trans_max_1m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_courier_trans_min_1m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_courier_trans_cnt_3m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_courier_trans_sum_3m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_courier_trans_max_3m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_courier_trans_min_3m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_courier_trans_cnt_6m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_courier_trans_sum_6m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_courier_trans_max_6m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_courier_trans_min_6m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_courier_trans_cnt_12m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_courier_trans_sum_12m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_courier_trans_max_12m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_courier_trans_min_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE null END) AS transaction_courier_trans_avg_sum_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE null END) AS transaction_courier_trans_avg_sum_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE null END) AS transaction_courier_trans_avg_sum_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE null END) AS transaction_courier_trans_avg_sum_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_courier_trans_avg_cnt_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_courier_trans_avg_cnt_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_courier_trans_avg_cnt_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_courier_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Услуги курьера'' and direction = ''D'' 
group by client_did, report_date
';

-- 14. Сувениры
execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_14 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_souvenirs_trans_cnt_1m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_souvenirs_trans_sum_1m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_souvenirs_trans_max_1m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_souvenirs_trans_min_1m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_souvenirs_trans_cnt_3m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_souvenirs_trans_sum_3m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_souvenirs_trans_max_3m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_souvenirs_trans_min_3m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_souvenirs_trans_cnt_6m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_souvenirs_trans_sum_6m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_souvenirs_trans_max_6m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_souvenirs_trans_min_6m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_souvenirs_trans_cnt_12m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_souvenirs_trans_sum_12m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_souvenirs_trans_max_12m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_souvenirs_trans_min_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE null END) AS transaction_souvenirs_trans_avg_sum_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE null END) AS transaction_souvenirs_trans_avg_sum_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE null END) AS transaction_souvenirs_trans_avg_sum_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE null END) AS transaction_souvenirs_trans_avg_sum_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_souvenirs_trans_avg_cnt_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_souvenirs_trans_avg_cnt_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_souvenirs_trans_avg_cnt_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_souvenirs_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Сувениры'' and direction = ''D'' 
group by client_did, report_date
';

-- 15. Перевод на карту
execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_15 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_card_transfer_trans_cnt_1m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_card_transfer_trans_sum_1m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_card_transfer_trans_max_1m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur END) AS transaction_card_transfer_trans_min_1m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_card_transfer_trans_cnt_3m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_card_transfer_trans_sum_3m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_card_transfer_trans_max_3m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur END) AS transaction_card_transfer_trans_min_3m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_card_transfer_trans_cnt_6m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_card_transfer_trans_sum_6m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_card_transfer_trans_max_6m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur END) AS transaction_card_transfer_trans_min_6m,
    COUNT(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_card_transfer_trans_cnt_12m,
    SUM(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_card_transfer_trans_sum_12m,
    MAX(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_card_transfer_trans_max_12m,
    MIN(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur END) AS transaction_card_transfer_trans_min_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur ELSE null END) AS transaction_card_transfer_trans_avg_sum_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur ELSE null END) AS transaction_card_transfer_trans_avg_sum_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur ELSE null END) AS transaction_card_transfer_trans_avg_sum_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur ELSE null END) AS transaction_card_transfer_trans_avg_sum_12m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_card_transfer_trans_avg_cnt_1m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_card_transfer_trans_avg_cnt_3m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_card_transfer_trans_avg_cnt_6m,
    AVG(CASE WHEN transaction_dtm >= ADD_MONTHS(report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_card_transfer_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Перевод на карту'' and direction = ''D'' 
group by client_did, report_date
';


execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_16 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_fun_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_fun_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm > ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_fun_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_fun_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_fun_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_fun_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_fun_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_fun_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_fun_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_fun_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_fun_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_fun_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_fun_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_fun_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_fun_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_fun_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_fun_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_fun_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_fun_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_fun_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_fun_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_fun_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_fun_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_fun_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Развлечения'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_17 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_taxes_fines_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_taxes_fines_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm > ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_taxes_fines_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_taxes_fines_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_taxes_fines_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_taxes_fines_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_taxes_fines_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_taxes_fines_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_taxes_fines_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_taxes_fines_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_taxes_fines_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_taxes_fines_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_taxes_fines_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_taxes_fines_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_taxes_fines_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_taxes_fines_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_taxes_fines_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_taxes_fines_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_taxes_fines_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_taxes_fines_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_taxes_fines_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_taxes_fines_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_taxes_fines_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_taxes_fines_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Налоги и штрафы'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_18 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_supermarkets_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_supermarkets_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm > ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_supermarkets_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_supermarkets_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_supermarkets_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_supermarkets_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_supermarkets_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_supermarkets_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_supermarkets_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_supermarkets_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_supermarkets_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_supermarkets_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_supermarkets_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_supermarkets_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_supermarkets_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_supermarkets_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_supermarkets_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_supermarkets_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_supermarkets_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_supermarkets_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_supermarkets_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_supermarkets_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_supermarkets_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_supermarkets_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Супермаркеты'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_19 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_sport_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_sport_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm > ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_sport_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_sport_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_sport_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_sport_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_sport_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_sport_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_sport_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_sport_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_sport_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_sport_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_sport_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_sport_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_sport_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_sport_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_sport_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_sport_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_sport_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_sport_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_sport_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_sport_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_sport_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_sport_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Спорттовары'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_20 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_sber_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_sber_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm > ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_sber_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_sber_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_sber_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_sber_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_sber_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_sber_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_sber_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_sber_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_sber_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_sber_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_sber_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_sber_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_sber_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_sber_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_sber_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_sber_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_sber_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_sber_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_sber_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_sber_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_sber_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_sber_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Сервисы Сбера'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_21 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_gosuslugi_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_gosuslugi_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm > ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_gosuslugi_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_gosuslugi_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_gosuslugi_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_gosuslugi_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_gosuslugi_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_gosuslugi_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_gosuslugi_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_gosuslugi_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_gosuslugi_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_gosuslugi_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_gosuslugi_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_gosuslugi_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_gosuslugi_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_gosuslugi_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_gosuslugi_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_gosuslugi_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_gosuslugi_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_gosuslugi_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_gosuslugi_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_gosuslugi_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_gosuslugi_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_gosuslugi_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Госуслуги'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_22 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_art_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_art_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm > ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_art_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_art_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_art_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_art_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_art_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_art_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_art_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_art_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_art_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_art_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_art_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_art_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_art_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_art_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_art_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_art_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_art_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_art_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_art_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_art_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_art_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_art_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Искусство'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_23 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_pharmacies_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_pharmacies_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm > ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_pharmacies_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_pharmacies_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_pharmacies_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_pharmacies_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_pharmacies_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_pharmacies_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_pharmacies_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_pharmacies_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_pharmacies_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_pharmacies_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_pharmacies_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_pharmacies_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_pharmacies_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_pharmacies_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_pharmacies_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_pharmacies_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_pharmacies_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_pharmacies_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_pharmacies_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_pharmacies_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_pharmacies_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_pharmacies_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Аптеки'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_24 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_flowers_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_flowers_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm > ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_flowers_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_flowers_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_flowers_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_flowers_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_flowers_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_flowers_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_flowers_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_flowers_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_flowers_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_flowers_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_flowers_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_flowers_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_flowers_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_flowers_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_flowers_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_flowers_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_flowers_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_flowers_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_flowers_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_flowers_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_flowers_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_flowers_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Цветы и растения'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_25 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_train_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_train_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm > ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_train_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_train_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_train_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_train_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_train_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_train_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_train_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_train_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_train_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_train_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_train_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_train_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_train_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_train_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_train_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_train_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_train_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_train_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_train_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_train_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_train_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_train_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Ж/д билеты'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_26 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_gambling_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_gambling_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm > ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_gambling_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_gambling_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_gambling_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_gambling_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_gambling_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_gambling_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_gambling_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_gambling_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_gambling_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_gambling_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_gambling_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_gambling_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_gambling_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_gambling_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_gambling_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_gambling_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_gambling_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_gambling_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_gambling_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_gambling_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_gambling_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_gambling_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Азартные игры'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_27 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_digital_goods_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_digital_goods_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm > ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_digital_goods_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_digital_goods_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_digital_goods_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_digital_goods_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_digital_goods_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_digital_goods_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_digital_goods_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_digital_goods_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_digital_goods_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_digital_goods_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_digital_goods_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_digital_goods_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_digital_goods_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_digital_goods_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_digital_goods_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_digital_goods_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_digital_goods_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_digital_goods_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_digital_goods_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_digital_goods_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_digital_goods_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_digital_goods_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Цифровые товары'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_28 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_books_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_books_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm > ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_books_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_books_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_books_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_books_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_books_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_books_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_books_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_books_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_books_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_books_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_books_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_books_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_books_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_books_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_books_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_books_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_books_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_books_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_books_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_books_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_books_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_books_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Книги'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_29 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_fuel_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_fuel_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm > ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_fuel_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_fuel_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_fuel_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_fuel_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_fuel_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_fuel_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_fuel_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_fuel_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_fuel_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_fuel_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_fuel_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_fuel_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_fuel_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_fuel_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_fuel_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_fuel_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_fuel_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_fuel_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_fuel_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_fuel_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_fuel_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_fuel_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Топливо'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_30 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_yandex_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_yandex_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_yandex_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_yandex_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_yandex_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_yandex_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_yandex_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_yandex_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_yandex_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_yandex_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_yandex_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_yandex_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_yandex_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_yandex_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_yandex_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_yandex_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_yandex_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_yandex_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_yandex_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_yandex_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_yandex_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_yandex_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_yandex_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_yandex_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Сервисы Яндекса'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_31 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_beauty_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_beauty_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_beauty_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_beauty_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_beauty_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_beauty_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_beauty_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_beauty_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_beauty_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_beauty_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_beauty_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_beauty_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_beauty_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_beauty_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_beauty_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_beauty_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_beauty_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_beauty_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_beauty_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_beauty_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_beauty_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_beauty_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_beauty_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_beauty_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Красота'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_32 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_cinema_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_cinema_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_cinema_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_cinema_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_cinema_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_cinema_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_cinema_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_cinema_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_cinema_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_cinema_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_cinema_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_cinema_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_cinema_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_cinema_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_cinema_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_cinema_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_cinema_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_cinema_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_cinema_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_cinema_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_cinema_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_cinema_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_cinema_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_cinema_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Кино'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_33 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_charity_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_charity_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_charity_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_charity_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_charity_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_charity_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_charity_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_charity_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_charity_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_charity_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_charity_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_charity_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_charity_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_charity_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_charity_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_charity_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_charity_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_charity_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_charity_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_charity_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_charity_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_charity_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_charity_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_charity_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Благотворительность'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_34 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_money_transfers_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_money_transfers_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_money_transfers_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_money_transfers_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_money_transfers_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_money_transfers_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_money_transfers_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_money_transfers_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_money_transfers_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_money_transfers_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_money_transfers_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_money_transfers_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_money_transfers_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_money_transfers_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_money_transfers_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_money_transfers_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_money_transfers_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_money_transfers_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_money_transfers_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_money_transfers_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_money_transfers_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_money_transfers_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_money_transfers_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_money_transfers_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Денежные переводы'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_35 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_auto_services_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_auto_services_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_auto_services_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_auto_services_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_auto_services_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_auto_services_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_auto_services_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_auto_services_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_auto_services_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_auto_services_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_auto_services_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_auto_services_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_auto_services_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_auto_services_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_auto_services_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_auto_services_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_auto_services_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_auto_services_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_auto_services_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_auto_services_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_auto_services_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_auto_services_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_auto_services_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_auto_services_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Автоуслуги'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_36 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_consulting_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_consulting_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_consulting_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_consulting_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_consulting_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_consulting_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_consulting_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_consulting_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_consulting_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_consulting_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_consulting_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_consulting_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_consulting_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_consulting_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_consulting_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_consulting_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_consulting_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_consulting_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_consulting_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_consulting_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_consulting_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_consulting_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_consulting_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_consulting_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Услуги и консультации'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_37 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_cash_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_cash_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_cash_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_cash_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_cash_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_cash_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_cash_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_cash_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_cash_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_cash_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_cash_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_cash_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_cash_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_cash_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_cash_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_cash_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_cash_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_cash_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_cash_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_cash_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_cash_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_cash_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_cash_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_cash_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Снятие наличных'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_38 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_other_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_other_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_other_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_other_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_other_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_other_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_other_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_other_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_other_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_other_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_other_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_other_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_other_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_other_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_other_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_other_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_other_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_other_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_other_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_other_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_other_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_other_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_other_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_other_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Прочие расходы'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_39 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_utilities_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_utilities_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_utilities_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_utilities_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_utilities_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_utilities_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_utilities_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_utilities_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_utilities_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_utilities_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_utilities_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_utilities_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_utilities_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_utilities_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_utilities_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_utilities_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_utilities_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_utilities_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_utilities_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_utilities_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_utilities_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_utilities_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_utilities_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_utilities_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''ЖКУ, связь'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_40 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_tech_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_tech_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_tech_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_tech_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_tech_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_tech_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_tech_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_tech_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_tech_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_tech_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_tech_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_tech_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_tech_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_tech_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_tech_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_tech_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_tech_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_tech_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_tech_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_tech_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_tech_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_tech_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_tech_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_tech_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Техника и электроника'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_41 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_jewelry_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_jewelry_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_jewelry_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_jewelry_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_jewelry_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_jewelry_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_jewelry_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_jewelry_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_jewelry_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_jewelry_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_jewelry_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_jewelry_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_jewelry_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_jewelry_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_jewelry_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_jewelry_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_jewelry_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_jewelry_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_jewelry_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_jewelry_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_jewelry_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_jewelry_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_jewelry_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_jewelry_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Ювелирные изделия'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_42 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_clothes_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_clothes_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_clothes_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_clothes_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_clothes_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_clothes_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_clothes_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_clothes_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_clothes_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_clothes_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_clothes_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_clothes_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_clothes_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_clothes_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_clothes_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_clothes_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_clothes_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_clothes_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_clothes_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_clothes_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_clothes_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_clothes_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_clothes_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_clothes_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Одежда и обувь'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_43 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_education_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_education_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_education_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_education_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_education_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_education_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_education_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_education_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_education_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_education_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_education_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_education_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_education_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_education_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_education_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_education_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_education_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_education_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_education_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_education_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_education_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_education_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_education_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_education_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Образование'' and direction = ''D'' 
group by client_did, report_date
';

execute immediate
'
create table EMA_COLLECT_FEAT_DM_MRK_TRANSACTION_TEMP_44 as
select /*+parallel(8)*/ 
    client_did,    
    report_date,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_finance_trans_cnt_1m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE 0 END) AS transaction_finance_trans_sum_1m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_finance_trans_max_1m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur END) AS transaction_finance_trans_min_1m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_finance_trans_cnt_3m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE 0 END) AS transaction_finance_trans_sum_3m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_finance_trans_max_3m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur END) AS transaction_finance_trans_min_3m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_finance_trans_cnt_6m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE 0 END) AS transaction_finance_trans_sum_6m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_finance_trans_max_6m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur END) AS transaction_finance_trans_min_6m,
    COUNT (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_finance_trans_cnt_12m,
    SUM (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE 0 END) AS transaction_finance_trans_sum_12m,
    MAX (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_finance_trans_max_12m,
    MIN (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur END) AS transaction_finance_trans_min_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur ELSE null END) AS transaction_finance_trans_avg_sum_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur ELSE null END) AS transaction_finance_trans_avg_sum_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur ELSE null END) AS transaction_finance_trans_avg_sum_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur ELSE null END) AS transaction_finance_trans_avg_sum_12m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -1) THEN amount_rur_cnt ELSE null END) AS transaction_finance_trans_avg_cnt_1m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -3) THEN amount_rur_cnt ELSE null END) AS transaction_finance_trans_avg_cnt_3m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -6) THEN amount_rur_cnt ELSE null END) AS transaction_finance_trans_avg_cnt_6m,
    AVG (CASE WHEN transaction_dtm >= ADD_MONTHS (report_date, -12) THEN amount_rur_cnt ELSE null END) AS transaction_finance_trans_avg_cnt_12m
from '|| tmp_table_2 ||'
where categ = ''Финансы'' and direction = ''D'' 
group by client_did, report_date
';
