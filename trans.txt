import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
import pandas as pd

def plot_model_performance(y_true, y_pred, log_scale=False, exclude_zeros=False, quantile_range=None):
    """
    Функция для визуализации качества модели
    
    Параметры:
    ----------
    y_true : array-like
        Истинные значения целевой переменной
    y_pred : array-like
        Предсказанные значения модели
    log_scale : bool, optional (default=False)
        Если True, применяет логарифмирование к осям
    exclude_zeros : bool, optional (default=False)
        Если True, исключает записи где y_true == 0
    quantile_range : tuple, optional (default=None)
        Диапазон квантилей для отбора данных (например, (0.05, 0.95))
    """
    
    # Создаем DataFrame для удобства
    df = pd.DataFrame({
        'y_true': y_true,
        'y_pred': y_pred
    })
    
    # Исключаем нули если нужно
    if exclude_zeros:
        df = df[df['y_true'] != 0]
    
    # Отбираем данные по квантилям если нужно
    if quantile_range is not None:
        low_q, high_q = quantile_range
        mask = (df['y_true'] >= df['y_true'].quantile(low_q)) & \
               (df['y_true'] <= df['y_true'].quantile(high_q))
        df = df[mask]
    
    # Вычисляем ошибки
    errors = df['y_true'] - df['y_pred']
    
    # Создаем subplot с 3 графиками вертикально
    fig = make_subplots(
        rows=3, cols=1,
        subplot_titles=(
            '1. Распределение ошибок (y_true - y_pred)',
            '2. Сравнение истинных и предсказанных значений',
            '3. KDE распределения y_true и y_pred'
        ),
        vertical_spacing=0.1
    )
    
    # 1. Боксплот ошибок (горизонтальный)
    fig.add_trace(
        go.Box(
            x=errors,
            name='Ошибки',
            orientation='h',
            boxpoints=False
        ),
        row=1, col=1
    )
    
    # 2. Scatter plot y_true vs y_pred
    scatter = go.Scatter(
        x=df['y_true'],
        y=df['y_pred'],
        mode='markers',
        marker=dict(
            size=5,
            opacity=0.3,
            color='rgba(100, 149, 237, 0.6)'
        ),
        name='Предсказания'
    )
    
    # Линия идеального предсказания
    line = go.Scatter(
        x=[df['y_true'].min(), df['y_true'].max()],
        y=[df['y_true'].min(), df['y_true'].max()],
        mode='lines',
        line=dict(color='red', dash='dash'),
        name='Идеальное предсказание'
    )
    
    fig.add_trace(scatter, row=2, col=1)
    fig.add_trace(line, row=2, col=1)
    
    # 3. KDE plot распределений
    # Для KDE используем numpy для вычисления гистограмм
    hist_true, bins_true = np.histogram(df['y_true'], bins=50, density=True)
    hist_pred, bins_pred = np.histogram(df['y_pred'], bins=50, density=True)
    
    kde_true = go.Scatter(
        x=bins_true[:-1],
        y=hist_true,
        mode='lines',
        fill='tozeroy',
        name='y_true',
        line=dict(color='blue')
    )
    
    kde_pred = go.Scatter(
        x=bins_pred[:-1],
        y=hist_pred,
        mode='lines',
        fill='tozeroy',
        name='y_pred',
        line=dict(color='orange')
    )
    
    fig.add_trace(kde_true, row=3, col=1)
    fig.add_trace(kde_pred, row=3, col=1)
    
    # Настройка логарифмических осей если нужно
    if log_scale:
        fig.update_xaxes(type='log', row=2, col=1)
        fig.update_yaxes(type='log', row=2, col=1)
        fig.update_xaxes(type='log', row=3, col=1)
        fig.update_yaxes(type='log', row=3, col=1)
    
    # Общие настройки
    fig.update_layout(
        height=1200,
        width=800,
        showlegend=True,
        title_text="Анализ качества модели"
    )
    
    # Подписи осей
    fig.update_xaxes(title_text="Ошибка (y_true - y_pred)", row=1, col=1)
    fig.update_xaxes(title_text="y_true", row=2, col=1)
    fig.update_yaxes(title_text="y_pred", row=2, col=1)
    fig.update_xaxes(title_text="Значение", row=3, col=1)
    fig.update_yaxes(title_text="Плотность", row=3, col=1)
    
    fig.show()
